#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(j>0) {
ci <- c(ci, j)
} else {
return()
}#return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
grep("Address",
colnames(sf_inqueries))
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(length(j)<1) {
ci <- c(ci, j)
} else {
return()
}#return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(length(j)<1) {
ci <- c(ci, j)
} else {
}#return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(length(j)<1) {
ci <- c(ci, j)
} else {
NULL }#return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
#bind rows from list of dfs
sf_df <- bind_rows(sf_list, .id = "column_label")
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(is.numeric(j)==T) {
ci <- c(ci, j)
} #return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
grep("Address",
colnames(sf_inqueries))
grep("Address",
colnames(sf_attempts_0))
length(grep("Address",
colnames(sf_inqueries)))
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(length(j)>1) {
ci <- c(ci, j)
}
ci#return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))
ci <- c(ci,j)
}
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(sf_inqueries))
ci <- c(ci, j)}
ci <- c()
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(sf_inqueries))
ci <- c(ci, j)}
ci
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(sf_attempts_0))
ci <- c(ci, j)}
ci
rm(c)
rm(ci)
ci <- c()
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(sf_attempts_0))
ci <- c(ci, j)}
ci
rm(ci)
ci<-c()
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(sf_attempts_0))
ci <- c(ci, j)}
ci
rm(ci)
ci<-c
ci<-c()
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(sf_attempts_1))
ci <- c(ci, j)}
ci
y
y[-2]
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
if(length(j)>1) {
ci <- c(ci, j)
} #return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y[-2]
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
#create list of site dfs
sf_list <- list(sf_attempts_0, sf_attempts_1, sf_inqueries)
names(sf_list) <- c("sf_attempts_0","sf_attempts_1", "sf_inqueries")
#function for selecting cols and joining parcel geoms
get_cols <- function(x, geo_p) {
#select columns based on strings- done to standardize data
x <- x[,grepl("ParcelID|AccountN|Address|Program|District|Neighborhood|PropertyClass",
colnames(x))]
#create list of columns to search for and rename
y <- c("ParcelID", "AccountN", "Address", "Program","District", "Neighborhood", "PropertyClass")
ci <- c()
#get index of colname that matches
for(i in 1:length(y)) {
j <- grep(y[i],
colnames(x))#grep colnames based on y list
ci <- c(ci, j) #return vector of indices
}
x<-x[, ci] #reorder columns based on index
#rename cols for later binding
colnames(x) <- y[-2]
#rename parcel id cols
colnames(x)[1] <- "ParcelID_structure" #rename parcel id col for joining
x$index <- 1:nrow(x) #create index row for rejoining data
#join data to parcel for geoms
x<- merge(x, geo_p[,'parcel_number'], by.x="ParcelID_structure", by.y="parcel_number")
x <- st_as_sf(x) %>% st_transform(2898)#transform crs
}
#apply function to return list of dfs
sf_list <- lapply(sf_list, get_cols,geo_p) #return list of dfs with parcel geoms
#bind rows from list of dfs
sf_df <- bind_rows(sf_list, .id = "column_label")
### join main structures parcel geoms and transform
sf_main <- sf_main %>% left_join(geo_p, by =c("ParcelID"="parcel_number"))
sf_main <- sf_main %>% st_as_sf() %>% st_transform(2898) %>% st_centroid() #transform
#### Spatial Operations ####
nearest_feature <- st_nearest_feature(sf_df, sf_main) #get nearest feature for each site
#get distance of all sites to structures
#creates matrix for filtering within app
dist2 <- st_distance(sf_df, sf_main)
dist2 <- as.matrix(dist2)
#get distance to nearest feature for each site in relation to main structure
nearest_dist <- st_distance(sf_df, sf_main[nearest_feature,],by_element=T)
#bind distance to nearest feature to dataframe
sf_df <- cbind(sf_df, nearest_dist)
#get index of nearest feature for each site
sf_df <- cbind(sf_df, nearest_feature)
#generate index for structures to match
sf_main$index <- 1:nrow(sf_main)
#join dfs by index
sf_df <- sf_df %>%
left_join(st_drop_geometry(sf_main[,c("index","ParcelID")]),
by = c("nearest_feature"='index')) %>%
rename(ParcelID_site=ParcelID)
#set up quantiles for adding quant col
classes <- 5
quantiles <- sf_df %>%
pull(nearest_dist) %>%
quantile() %>%
as.vector()
# here create custom labels
labels <- purrr::imap_chr(quantiles, function(., idx){
return(paste0(round(quantiles[idx], 0),
"ft",
" – ",
round(quantiles[idx + 1], 0),
"ft"))
})
labels <- labels[1:length(labels) - 1]
sf_df <- sf_df %>%  mutate(quantiles = cut(nearest_dist,
breaks = quantiles,
labels = labels,
include.lowest = T))
sf_df <- st_drop_geometry(sf_df)
sf_df <- sf_df %>% left_join(geo_p[,"parcel_number"], by = c("ParcelID_structure"="parcel_number"))
sf_df <- sf_df %>% st_as_sf()
sf_main <- st_drop_geometry(sf_main)
sf_main <- sf_main %>% left_join(geo_p[,"parcel_number"], by=c("ParcelID"="parcel_number"))
sf_main <- sf_main %>% st_as_sf()
saveRDS(dist2, here::here('appData/distance-matrix.RDS'))
saveRDS(sf_df,here::here('appData/sites.RDS'))
saveRDS(sf_main, here::here("appData/main.RDS"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#read in potential site data
sites <- readRDS(here::here('appData/sites.RDS')) %>%
st_transform(4326) %>%
st_cast("POLYGON") %>%
filter(!ParcelID_structure %in% main$ParcelID)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sf::st_layers("C:/Users/gsaldutti/OneDrive - Detroit Land Bank Authority/data/detroit-shapes/base_shapes.gdb")
sf::st_read("C:/Users/gsaldutti/OneDrive - Detroit Land Bank Authority/data/detroit-shapes/base_shapes.gdb", layer="LRA_PCA_PHA_202211")
lra <- sf::st_read("C:/Users/gsaldutti/OneDrive - Detroit Land Bank Authority/data/detroit-shapes/base_shapes.gdb", layer="LRA_PCA_PHA_202211")
saveRDS(lra, here::here('appData/LRA.RDS'))
lra
lra %>% st_cast('LINESTRING')
lra %>% st_cast('MULTIPOLYGON')
lra <- lra %>% st_cast('MULTIPOLYGON')
lra <- lra %>% st_cast('POLYGON')
lra <- lra %>% st_cast('LINESTRING')
plot(lra)
saveRDS(lra, here::here('appData/LRA.RDS')
)
runApp()
runApp()
runApp()
runApp()
st_Crs(lra)
st_crs(lra)
runApp()
runApp()
runApp()
?addLayersControl()
runApp()
runApp()
runApp()
runApp()
lra<- readRDS("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true") %>% st_transform(4326)
lra<- download.file("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true") %>% st_transform(4326)
lra<- download.file("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true",
destfile = '/tmp/test.RDS') %>% st_transform(4326)
lra<- load((url("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true")) %>% st_transform(4326)
#create ui
#
ui <- fluidPage(#create fluid page
lra<- load(url("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true")) %>% st_transform(4326)
rm(lra)
lra<- load(url("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true")) %>% st_transform(4326)
x <- RCurl::getURL("https://github.com/thefactmachine/hex-binning-gis-data/raw/master/popDensity.RData")#create ui
x <- RCurl::getURL("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS")#create ui
x <- RCurl::getURL("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=True")#create ui
x <- RCurl::getURL("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true")#create ui
x <- RCurl::getURL("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS/?raw=true")#create ui
x <- RCurl::getURL("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS")#create ui
x
x <- load(url("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS"))#create ui
x <- download.file("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS"),'myfile')#create ui
x <- download.file("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS",'myfile')#create ui
x<- load('myfile')
download.file("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS",'myfile')#create ui
x<- load('myfile')
readRDS(gzcon(url("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS")))#create ui
x <- readRDS(gzcon(url("https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS")))#create ui
lra_url <- "https://github.com/gsaldutti-dlba/scattered-site-bundles/blob/main/appData/LRA.RDS?raw=true"
x <- readRDS(gzcon(url(lra_url)))#create ui
lra <- readRDS(here::here('appData/LRA.RDS')) %>% st_cast("POLYGON") %>%st_cast("LINESTRING")
runApp()
runApp()
runApp()
runApp()
districts <- readRDS(here::here('appData/districts.RDS')) %>% st_cast("POLYGON") %>%st_cast("LINESTRING")
runApp()
runApp()
.libPaths()
sf_auth()
salesforcer::sf_auth()
salesforcer::sf_describe_object_fields("case_history__c")
salesforcer::sf_describe_object_fields("Case History")
library(salesforcer)
objs <- sf_list_objects()
for(i in objs$sobjects)
xx
objs$sobjects
objs$sobjects$name
for(i in 1:length(objs$sobjects)) {
n<-objs$sobjects[i]$name
names <- c(names,n)
}
names<- c(
)
for(i in 1:length(objs$sobjects)) {
n<-objs$sobjects[i]$name
names <- c(names,n)
}
n<-objs$sobjects[[i]]$name
for(i in 1:length(objs$sobjects)) {
print(objs$sobjects)
#n<-objs$sobjects[[i]]$name
#names <- c(names,n)
}
for(i in 1:length(objs$sobjects)) {
print(objs$sobjects$name)
#n<-objs$sobjects[[i]]$name
#names <- c(names,n)
}
for(i in 1:length(objs$sobjects)) {
print(objs$sobjects[i]$name)
#n<-objs$sobjects[[i]]$name
#names <- c(names,n)
}
print(objs$sobjects[i]$label)
for(i in 1:length(objs$sobjects)) {
print(objs$sobjects[i]$label)
#n<-objs$sobjects[[i]]$name
#names <- c(names,n)
}
objs$objs[[1]]
objs$objs[1]
objs$sobjects[1]
objs$sobjects[1]$name
objs$sobjects[[1]]$name
names<- c(
)
for(i in 1:length(objs$sobjects)) {
n <- objs$sobjects[[i]]$name
names <- c(names,n)
}
names
grep('history',names,ignore.case=T)
names[grep('history',names,ignore.case=T)]
f <- sf_describe_object_fields("CaseHistory")
View(f)
print(f$label)
